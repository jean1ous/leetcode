{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using namespace std;\
\
class BinaryTree \{\
public:\
  int value;\
  BinaryTree *left;\
  BinaryTree *right;\
\
  BinaryTree(int value) \{\
    this->value = value;\
    left = nullptr;\
    right = nullptr;\
  \}\
\};\
\
int helper(int depth, BinaryTree *curr)\{ \
  if(curr == nullptr)\{ //base case for the root \
    return 0; \
  \}\
\
  return depth + helper(depth +1, curr->left) + helper(depth+1, curr->right);\
\
\}\
\
int nodeDepths(BinaryTree *root) \{\
  // Write your code here.\
  return helper(0, root); //out depth is 0 at the root \
\}\
\
\
}